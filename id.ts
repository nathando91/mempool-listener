import { Transaction, WebSocketProvider } from "ethers";
import fs from "fs";

// WS t·ªõi Geth local
const WS_URL = "ws://127.0.0.1:8546";
const provider = new WebSocketProvider(WS_URL);

// Contract c·∫ßn l·ªçc
const targetAddress = "0x66a9893cC07D91D95644AEDD05D03f95e1dBA8Af".toLowerCase();

// File log
const outputFile = "filtered_tx222.txt";

// ====== Tuning ======
const BATCH_SIZE = 8000;          // s·ªë hash x·ª≠ l√Ω m·ªói tick
const TICK_MS = 100;             // chu k·ª≥ worker
const MAX_RETRY = 100;            // s·ªë l·∫ßn retry getTransaction
const BASE_BACKOFF_MS = 50;      // backoff c∆° b·∫£n
const BACKFILL_INTERVAL_MS = 1000; // chu k·ª≥ backfill txpool_content
// =====================

/** H√†ng ƒë·ª£i hash c·∫ßn fetch chi ti·∫øt */
const q: string[] = [];
/** ƒê√°nh d·∫•u ƒë√£ th·∫•y ƒë·ªÉ dedup queue & tr√°nh log tr√πng */
const seen = new Set<string>();
/** ƒê√°nh d·∫•u ƒë√£ l∆∞u (ƒë·ªÉ kh√¥ng ghi file l·∫∑p) */
const saved = new Set<string>();

/** Enqueue hash an to√†n */
function enqueue(hash: string) {
    if (!hash || typeof hash !== "string") return;
    hash = hash.toLowerCase();
    if (!seen.has(hash)) {
        seen.add(hash);
        q.push(hash);
    }
}

async function fetchTxWithRetry(hash: string) {
    let attempt = 0;
    while (attempt < MAX_RETRY) {
        try {
            const tx = await provider.getTransaction(hash);
            if (tx) return tx;
            // null ‚Üí c√≥ th·ªÉ do race; ch·ªù backoff r·ªìi th·ª≠ l·∫°i
        } catch (e) {
            // c·ª© retry v·ªõi backoff
        }
        attempt++;
        const delay = BASE_BACKOFF_MS * Math.pow(1.4, attempt); // backoff nh·∫π
        await new Promise(r => setTimeout(r, delay));
    }
    return null;
}

/** Ghi k·∫øt qu·∫£ khi match target (idempotent) */
function saveIfMatch(tx: any) {
    try {
        const to = tx.to?.toLowerCase?.();
        if (to && to === targetAddress) {
            const h = (tx.hash as string).toLowerCase();
            if (saved.has(h)) return;
            const line = `${new Date().toISOString()} | ${h}\n`;
            fs.appendFileSync(outputFile, line);
            saved.add(h);
            console.log("üéØ Found tx to target, saved:", h);
        }
    } catch (e: any) {
        console.error("Write failed:", e?.message || e);
    }
}

/** Worker: r√∫t batch hash r·ªìi re-fetch chi ti·∫øt */
async function worker() {
    if (!q.length) return;
    const batch = q.splice(0, BATCH_SIZE);
    await Promise.all(
        batch.map(async (h) => {
            const tx = await fetchTxWithRetry(h);
            if (!tx) return; // b·ªè qua n·∫øu v·∫´n null sau MAX_RETRY
            // In raw serialized (n·∫øu c·∫ßn debug)
            try {
                const serialized = Transaction.from(tx as any).serialized;
                // console.log(serialized);
            } catch { }
            saveIfMatch(tx);
        })
    );
}

/** Backfill: qu√©t txpool_content ƒë·ªÉ v√° l∆∞·ªõi */
async function backfillTxpool() {
    try {
        const content = await provider.send("txpool_content", []);
        // Geth tr·∫£ v·ªÅ: { pending: { [from]: { [nonce]: txObj } }, queued: {...} }
        const buckets = ["pending", "queued"] as const;
        for (const b of buckets) {
            const bucket = content?.[b];
            if (!bucket) continue;
            for (const _from of Object.keys(bucket)) {
                const nonces = bucket[_from];
                for (const nonce of Object.keys(nonces)) {
                    const tx = nonces[nonce];
                    // ∆Øu ti√™n c√≥ hash; n·∫øu kh√¥ng c√≥, c√≥ th·ªÉ compute t·ª´ Transaction.from
                    let hash: string | undefined = tx?.hash;
                    if (!hash) {
                        try {
                            const computedHash = Transaction.from({
                                to: tx.to,
                                from: tx.from,
                                nonce: tx.nonce,
                                gasLimit: tx.gas || tx.gasLimit,
                                data: tx.input,
                                value: tx.value,
                                maxFeePerGas: tx.maxFeePerGas,
                                maxPriorityFeePerGas: tx.maxPriorityFeePerGas,
                                gasPrice: tx.gasPrice, // legacy
                                chainId: tx.chainId,
                                type: tx.type,
                            }).hash;
                            hash = computedHash || undefined;
                        } catch { }
                    }
                    if (hash) enqueue(hash);
                    // N·∫øu mu·ªën x·ª≠ l√Ω ngay (kh·ªèi re-fetch): c√≥ th·ªÉ save tr·ª±c ti·∫øp t·ª´ txpool
                    // nh∆∞ng ƒë·ªÉ ƒë·ªìng nh·∫•t lu·ªìng d·ªØ li·ªáu, ta v·∫´n enqueue ƒë·ªÉ d√πng c√πng logic re-fetch.
                }
            }
        }
    } catch (e: any) {
        // Th∆∞·ªùng g·∫∑p n·∫øu node kh√¥ng b·∫≠t txpool_* qua WS/provider n√†y
        console.warn("Backfill txpool_content failed:", e?.message || e);
    }
}

async function main() {
    console.log("üîé Subscribing pending transactions‚Ä¶", WS_URL);

    // Subscribe stream pending
    provider.on("pending", (txHash: string) => {
        enqueue(txHash);
    });

    // ƒê·ªãnh k·ª≥ ch·∫°y worker
    setInterval(() => {
        worker().catch((e) => console.error("worker err:", e));
    }, TICK_MS);

    // ƒê·ªãnh k·ª≥ backfill txpool (ch·ªâ ho·∫°t ƒë·ªông n·∫øu node local b·∫≠t txpool API)
    setInterval(() => {
        backfillTxpool().catch(() => { });
    }, BACKFILL_INTERVAL_MS);

    // Log s·ª± c·ªë WS (t√πy ch·ªçn)
    (provider as any)._websocket?.on?.("close", (c: any) => {
        console.warn("WS closed:", c);
    });
    (provider as any)._websocket?.on?.("error", (e: any) => {
        console.warn("WS error:", e?.message || e);
    });

    console.log("‚úÖ Ready. Listening‚Ä¶");
}

main().catch((e) => {
    console.error(e);
    process.exit(1);
});

// Graceful shutdown
process.on("SIGINT", () => {
    console.log("Bye");
    process.exit(0);
});
